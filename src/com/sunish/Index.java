/*
 * Name : Sunish S Sheth
 * Net ID. : sss140830
 * Start date: September 11th, 2014
 * Purpose : Class Assignment - CS 6301.022
 * Summary: The assignment is on Contact Manager.
 *          This program basically adds a new contact, deletes an existing contact and lastly updates the contact.
 *          The entire code is writting in index.java file.
 *          This program stores the contact details in a file called ContactList.txt
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sunish;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.GroupLayout;

/**
 *
 * @author Sunish
 */
public class Index extends javax.swing.JFrame {

    /**
     * Creates new form Index
     */
    int progress = 0;
    String error = "";
    int FirstNameFlag = 0;
    int LastNameFlag = 0;
    int AddressLine1FLag = 0;
    int AddressLine2Flag = 0;
    int CityFlag = 0;
    int StateFlag = 0;
    int PincodeFlag = 0;
    int PhoneNumberFLag = 0;
    int MiddleNameFlag = 0;
    String[][] TableValues;
    int noOfDeleteItems = 0;
    int currentRowSelected;
    String Finalresult[] = new String[1];

    public Index() {
        initComponents();
        /* If a row is selected from the table which means the user is in the 
         modify section so initially I need to set some flags and error string to blank.
         * Else I keep default values.
         */
        RightPanel.getRootPane().setDefaultButton(Modify);
        Name.getRootPane().setDefaultButton(Modify);
        Address.getRootPane().setDefaultButton(Modify);

        if (currentRowSelected > -1) {
            error = "";
            ErrorLabel.setText(error);
            FirstNameFlag = 1;
            LastNameFlag = 1;
            AddressLine1FLag = 1;
            CityFlag = 1;
            StateFlag = 1;
            PincodeFlag = 1;
            PhoneNumberFLag = 1;
            AddressLine2Flag = 1;
            MiddleNameFlag = 1;
            FirstNameLabel.setForeground(Color.black);
            LastNameLabel.setForeground(Color.black);
            MiddleLabel.setForeground(Color.black);
            AddressLine1Label.setForeground(Color.black);
            AddressLine2Label.setForeground(Color.black);
            CityLabel.setForeground(Color.black);
            StateLabel.setForeground(Color.black);
            PostalCodeLabel.setForeground(Color.black);
            PhoneLabel.setForeground(Color.black);
            Modify.setEnabled(true);
        } else {
            int progress = 0;
            Modify.setEnabled(false);
            ErrorLabel.setText("*All are required Fields");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        LeftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LeftInfo = new javax.swing.JTable();
        Insert = new javax.swing.JButton();
        RightPanel = new javax.swing.JPanel();
        PhoneLabel = new javax.swing.JLabel();
        PhoneText = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        MaleRadio = new javax.swing.JRadioButton();
        FemaleRadio = new javax.swing.JRadioButton();
        Modify = new javax.swing.JButton();
        Name = new javax.swing.JPanel();
        FirstNameText = new javax.swing.JTextField();
        FirstNameLabel = new javax.swing.JLabel();
        LastNameText = new javax.swing.JTextField();
        LastNameLabel = new javax.swing.JLabel();
        MiddleText = new javax.swing.JTextField();
        MiddleLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Address = new javax.swing.JPanel();
        AddressLine1Text = new javax.swing.JTextField();
        AddressLine1Label = new javax.swing.JLabel();
        AddressLine2Text = new javax.swing.JTextField();
        AddressLine2Label = new javax.swing.JLabel();
        CityLabel = new javax.swing.JLabel();
        StateLabel = new javax.swing.JLabel();
        PostalCodeLabel = new javax.swing.JLabel();
        CityText = new javax.swing.JTextField();
        StateText = new javax.swing.JTextField();
        PostalText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ErrorLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        StatusPanel = new javax.swing.JPanel();
        StatusLabel = new javax.swing.JLabel();
        FinalResult = new javax.swing.JLabel();
        ProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        LeftInfo.setModel(new javax.swing.table.DefaultTableModel(

        ));
        LeftInfo.setRowHeight(20);
        LeftInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeftInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(LeftInfo);
        JTableHeader header = LeftInfo.getTableHeader();
        header.setBackground(Color.yellow);
        LeftInfo.getTableHeader().setReorderingAllowed(false);
        int a = tableConfig();

        Insert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add_user.png"))); // NOI18N
        Insert.setText("Add a new contact");
        Insert.setToolTipText("Click to add a new contact");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LeftPanelLayout = new javax.swing.GroupLayout(LeftPanel);
        LeftPanel.setLayout(LeftPanelLayout);
        LeftPanelLayout.setHorizontalGroup(
            LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Insert, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LeftPanelLayout.setVerticalGroup(
            LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Insert))
        );

        RightPanel.setVisible(false);

        PhoneLabel.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        PhoneLabel.setText("Phone Number:");

        PhoneText.setColumns(10);
        try {
            PhoneText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-###-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        PhoneText.setToolTipText("Enter Contact Number. Cannot be black or more than 10 characters");
        PhoneText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                PhoneTextFocusLost(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel5.setText("Gender:");
        jLabel5.setToolTipText("Enter Gender. Choose any one below.");

        buttonGroup1.add(MaleRadio);
        MaleRadio.setSelected(true);
        MaleRadio.setText("Male");
        MaleRadio.setToolTipText("Male");

        buttonGroup1.add(FemaleRadio);
        FemaleRadio.setText("Female");
        FemaleRadio.setToolTipText("Female");

        Modify.setText("Save");
        Modify.setToolTipText("Save your changes");
        Modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyActionPerformed(evt);
            }
        });

        Name.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Al Bayan", 1, 15))); // NOI18N

        FirstNameText.setColumns(20);
        FirstNameText.setToolTipText("Enter First Name. Cannot be black or more than 20 characters");
        FirstNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstNameTextActionPerformed(evt);
            }
        });
        FirstNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                FirstNameTextFocusLost(evt);
            }
        });
        FirstNameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FirstNameTextKeyTyped(evt);
            }
        });

        FirstNameLabel.setText("First Name");

        LastNameText.setColumns(20);
        LastNameText.setToolTipText("Enter Last Name. Cannot be black or more than 20 characters");
        LastNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                LastNameTextFocusLost(evt);
            }
        });

        LastNameLabel.setText("Last Name");

        MiddleText.setColumns(1);
        MiddleText.setToolTipText("Enter Middle Initial. Cannot be more than 1 characters");
        MiddleText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                MiddleTextFocusLost(evt);
            }
        });

        MiddleLabel.setText("Middle");

        jLabel3.setForeground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("*");

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("*");

        javax.swing.GroupLayout NameLayout = new javax.swing.GroupLayout(Name);
        Name.setLayout(NameLayout);
        NameLayout.setHorizontalGroup(
            NameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NameLayout.createSequentialGroup()
                .addGroup(NameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FirstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(NameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(FirstNameLabel)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(NameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(NameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(LastNameLabel)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(NameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MiddleLabel)
                    .addComponent(MiddleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 73, Short.MAX_VALUE))
        );
        NameLayout.setVerticalGroup(
            NameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NameLayout.createSequentialGroup()
                .addGroup(NameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FirstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MiddleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(NameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FirstNameLabel)
                    .addComponent(LastNameLabel)
                    .addComponent(MiddleLabel)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)))
        );

        Address.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Al Bayan", 1, 15))); // NOI18N

        AddressLine1Text.setColumns(35);
        AddressLine1Text.setToolTipText("Enter Adress Line 1. Cannot be black or more than 35 characters");
        AddressLine1Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddressLine1TextActionPerformed(evt);
            }
        });
        AddressLine1Text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddressLine1TextFocusLost(evt);
            }
        });

        AddressLine1Label.setText("Street Address");

        AddressLine2Text.setColumns(35);
        AddressLine2Text.setToolTipText("Enter your Address Line 2. Cannot be more than 35 characters");
        AddressLine2Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddressLine2TextActionPerformed(evt);
            }
        });
        AddressLine2Text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddressLine2TextFocusLost(evt);
            }
        });

        AddressLine2Label.setText("Address Line 2");

        CityLabel.setText("City");

        StateLabel.setText("State");

        PostalCodeLabel.setText("Postal Code");

        CityText.setColumns(25);
        CityText.setToolTipText("Enter City. Cannot be black or more than 25 characters");
        CityText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CityTextActionPerformed(evt);
            }
        });
        CityText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                CityTextFocusLost(evt);
            }
        });

        StateText.setColumns(2);
        StateText.setToolTipText("Enter State. Cannot be black or more than 2 characters");
        StateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StateTextActionPerformed(evt);
            }
        });
        StateText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                StateTextFocusLost(evt);
            }
        });

        PostalText.setColumns(9);
        PostalText.setToolTipText("Enter Postal code. Cannot be black or more than 9 characters and all numeric.");
        PostalText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                PostalTextFocusLost(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setText("*");

        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("*");

        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("*");

        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("*");

        javax.swing.GroupLayout AddressLayout = new javax.swing.GroupLayout(Address);
        Address.setLayout(AddressLayout);
        AddressLayout.setHorizontalGroup(
            AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddressLayout.createSequentialGroup()
                .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(AddressLine2Text, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(AddressLine1Text, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AddressLayout.createSequentialGroup()
                        .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AddressLayout.createSequentialGroup()
                                .addComponent(CityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(StateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(AddressLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(StateLabel))))
                            .addGroup(AddressLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AddressLayout.createSequentialGroup()
                                        .addComponent(CityLabel)
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel7))
                                    .addComponent(AddressLine2Label)
                                    .addGroup(AddressLayout.createSequentialGroup()
                                        .addComponent(AddressLine1Label)
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel6)))))
                        .addGap(1, 1, 1)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AddressLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(PostalCodeLabel)
                                .addGap(1, 1, 1)
                                .addComponent(jLabel9))
                            .addComponent(PostalText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        AddressLayout.setVerticalGroup(
            AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddressLayout.createSequentialGroup()
                .addComponent(AddressLine1Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddressLine1Label)
                    .addComponent(jLabel6))
                .addGap(3, 3, 3)
                .addComponent(AddressLine2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(AddressLine2Label)
                .addGap(3, 3, 3)
                .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PostalText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CityLabel)
                    .addComponent(StateLabel)
                    .addComponent(PostalCodeLabel)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)))
        );

        ErrorLabel.setForeground(new java.awt.Color(255, 0, 0));

        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("*");

        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("*");

        javax.swing.GroupLayout RightPanelLayout = new javax.swing.GroupLayout(RightPanel);
        RightPanel.setLayout(RightPanelLayout);
        RightPanelLayout.setHorizontalGroup(
            RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Address, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(RightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RightPanelLayout.createSequentialGroup()
                        .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PhoneText, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(RightPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(RightPanelLayout.createSequentialGroup()
                                        .addComponent(PhoneLabel)
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5))
                                    .addGroup(RightPanelLayout.createSequentialGroup()
                                        .addGap(235, 235, 235)
                                        .addComponent(MaleRadio)))
                                .addGap(1, 1, 1)
                                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FemaleRadio)
                                    .addComponent(jLabel11))))
                        .addContainerGap(286, Short.MAX_VALUE))
                    .addGroup(RightPanelLayout.createSequentialGroup()
                        .addComponent(ErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Modify, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
        );
        RightPanelLayout.setVerticalGroup(
            RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RightPanelLayout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhoneLabel)
                    .addComponent(jLabel5)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MaleRadio)
                    .addComponent(FemaleRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Modify, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        StatusLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        StatusLabel.setForeground(new java.awt.Color(0, 0, 255));
        StatusLabel.setToolTipText("Status Bar");

        FinalResult.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        FinalResult.setForeground(new java.awt.Color(0, 153, 51));
        if(FinalResult.getText().toString()!=""){
            FinalResult.setToolTipText("Confirmation Message");
        }else{
            FinalResult.setToolTipText("");
        }

        ProgressBar.setBackground(new java.awt.Color(51, 153, 255));
        ProgressBar.setToolTipText("Progess Report");
        ProgressBar.setStringPainted(true);

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusPanelLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(FinalResult, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(StatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusPanelLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FinalResult)
                    .addComponent(StatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        StatusPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {FinalResult, StatusLabel});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(LeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(RightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyActionPerformed
        // TODO add your handling code here:
        /*
         * This method is called when you hit the save button.
         * This method used for update and add a contact.
         * Update: It will take all the values from the fields in the form and store it in an TableValues array.
         *         This array is then send to a funtion updateTxtFile where it updates the text file
         * Add a contact: It will take all the values of the fields from the form. 
         *                According to our requirement, the full name of two people can't be the same.
         *                We check the constraint and after validating add it to our .txt file.
         */

        // Update part
        String FullName = "";
        String CheckFullName;
        int MatchFound = 0;
        //Validation: checking if some record already has the same fullname.
        FullName = FullName + FirstNameText.getText().toString() + "\t" + MiddleText.getText().toString() + "\t" + LastNameText.getText().toString() + "\t";
        for (int s = 0; s < TableValues.length; s++) {
            CheckFullName = "";
            for (int k = 0; k < 3; k++) {
                CheckFullName = CheckFullName + TableValues[s][k] + "\t";
            }
            if (CheckFullName.equalsIgnoreCase(FullName) && s != currentRowSelected) {
                MatchFound = 1;
            }
        }
        //&& AddressLine1Text.getText().toString() != TableValues[s][3]
        if (currentRowSelected > -1 && MatchFound == 0) {
            TableValues[currentRowSelected][0] = FirstNameText.getText().toString();
            TableValues[currentRowSelected][1] = MiddleText.getText().toString();
            TableValues[currentRowSelected][2] = LastNameText.getText().toString();
            TableValues[currentRowSelected][3] = AddressLine1Text.getText().toString();
            TableValues[currentRowSelected][4] = AddressLine2Text.getText().toString();
            TableValues[currentRowSelected][5] = CityText.getText().toString();
            TableValues[currentRowSelected][6] = StateText.getText().toString();
            TableValues[currentRowSelected][7] = PostalText.getText().toString();
            TableValues[currentRowSelected][8] = PhoneText.getText().toString();
            if (MaleRadio.isSelected()) {
                TableValues[currentRowSelected][9] = MaleRadio.getText().toString();
            } else {
                TableValues[currentRowSelected][9] = FemaleRadio.getText().toString();
            }
            updateTxtFile(TableValues, 0);

        } else {// Add to contact part
            try {
                String data = "";
                // Code to open a file to write data.
                File file = new File("ContactList.txt");
                /*if(!file.exists()){
                 file.createNewFile();
                 }*/
                FileWriter fileWritter = new FileWriter(file.getName(), true);
                BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
                data = data + FirstNameText.getText().toString() + "\t";
                data = data + MiddleText.getText().toString() + "\t";
                data = data + LastNameText.getText().toString() + "\t";
                data = data + AddressLine1Text.getText().toString() + "\t";
                data = data + AddressLine2Text.getText().toString() + "\t";
                data = data + CityText.getText().toString() + "\t";
                data = data + StateText.getText().toString() + "\t";
                data = data + PostalText.getText().toString() + "\t";
                data = data + PhoneText.getText().toString() + "\t";
                if (MaleRadio.isSelected()) {
                    data = data + MaleRadio.getText().toString();
                } else {
                    data = data + FemaleRadio.getText().toString();
                }
                data = data + '\n';
                //If all the constraints are satisfied, the contact is added to the file and we refresh the window.
                if (MatchFound == 0) {
                    bufferWritter.write(data);
                    bufferWritter.close();
                    FinalResult.setText("Your Contact is sucessfully added");
                    FinalResult.setForeground(new Color(0, 153, 51));
                    FinalResult.setToolTipText("Confirmation Message");
                    if (ProgressBar.getValue() > 50) {//change color on 50%
                        UIDefaults defaults = new UIDefaults();
                        defaults.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.green));
                        defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new MyPainter(Color.GREEN));
                        ProgressBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
                        ProgressBar.putClientProperty("Nimbus.Overrides", defaults);
                    } else {
                        UIDefaults defaults = new UIDefaults();
                        defaults.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.red));
                        defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new MyPainter(Color.red));
                        ProgressBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
                        ProgressBar.putClientProperty("Nimbus.Overrides", defaults);
                    }


                    ProgressBar.setValue(100);
                    //JOptionPane.showMessageDialog(null, "Your Contact is successfully added", "Information", 1);

                    LeftInfo.validate();
                    LeftInfo.repaint();
                    tableConfig();
                    Insert();

                } else {
                    FinalResult.setText("You cannot duplicate names");
                    FinalResult.setToolTipText("Confirmation Message");
                    FinalResult.setForeground(Color.red);
                    //JOptionPane.showMessageDialog(null, "You already have a person with same name.", "Error", 0);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_ModifyActionPerformed

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
        // TODO add your handling code here:
        /*
         * When we click on the Add to contact button, this method is called.
         * We clear all the fields in the form so new entry can be punched in.
         */
        int progress = 0;

        if (ProgressBar.getValue() > 50) {//change color on 50%
            UIDefaults defaults = new UIDefaults();
            defaults.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.green));
            defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new MyPainter(Color.green));
            ProgressBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
            ProgressBar.putClientProperty("Nimbus.Overrides", defaults);
        } else {
            UIDefaults defaults = new UIDefaults();
            defaults.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.red));
            defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new MyPainter(Color.red));
            ProgressBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
            ProgressBar.putClientProperty("Nimbus.Overrides", defaults);
        }
        ProgressBar.setValue(progress);
        FirstNameFlag = 0;
        LastNameFlag = 0;
        AddressLine1FLag = 0;
        CityFlag = 0;
        StateFlag = 0;
        PincodeFlag = 0;
        PhoneNumberFLag = 0;
        MiddleNameFlag = 0;
        AddressLine2Flag = 0;
        FirstNameLabel.setForeground(Color.black);
        LastNameLabel.setForeground(Color.black);
        MiddleLabel.setForeground(Color.black);
        AddressLine1Label.setForeground(Color.black);
        AddressLine2Label.setForeground(Color.black);
        CityLabel.setForeground(Color.black);
        StateLabel.setForeground(Color.black);
        PostalCodeLabel.setForeground(Color.black);
        PhoneLabel.setForeground(Color.black);
        FirstNameText.setText("");
        LastNameText.setText("");
        MiddleText.setText("");
        AddressLine1Text.setText("");
        AddressLine2Text.setText("");
        CityText.setText("");
        StateText.setText("");
        PostalText.setText("");
        PhoneText.setText("");
        RightPanel.setVisible(true);
        Modify.setEnabled(false);
        ErrorLabel.setText("*All are required Fields");
        currentRowSelected = -1;
        StatusLabel.setText("Your are currently adding a contact");// Setting up the status bar
    }//GEN-LAST:event_InsertActionPerformed

    private void FirstNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FirstNameTextActionPerformed

    private void AddressLine1TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddressLine1TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddressLine1TextActionPerformed

    private void CityTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CityTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CityTextActionPerformed

    private void StateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StateTextActionPerformed

    /*
     * The functions below are called when we lose focus from the text field.
     * These functions are used for validation.
     * The button is disabled until all the constraints are satisfied.
     */
    private void FirstNameTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FirstNameTextFocusLost
        // TODO add your handling code here:
        error = "";
        ErrorLabel.setText("");
        FirstNameLabel.setForeground(Color.black);
        FirstNameFlag = 0;
        String FirstName = FirstNameText.getText();
        if ("".equals(FirstName.trim())) {
            error = "First Name should not be kept blank";
        } else if (FirstName.length() > 20) {
            error = "First Name should not exceed more than 20 characters";
        } else {
            FirstNameFlag = 1;
        }
        if (!"".equals(error)) {
            FirstNameLabel.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_FirstNameTextFocusLost

    private void LastNameTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LastNameTextFocusLost
        // TODO add your handling code here:
        // Code to validates last name input 
        error = "";
        ErrorLabel.setText("");
        LastNameLabel.setForeground(Color.black);
        LastNameFlag = 0;
        String LastName = LastNameText.getText();
        if ("".equals(LastName.trim())) {
            error = "Last Name should not be kept blank";
        } else if (LastName.length() > 20) {
            error = "Last Name should not exceed more than 20 characters";
        } else {
            LastNameFlag = 1;
        }
        if (!"".equals(error)) {
            LastNameLabel.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_LastNameTextFocusLost

    private void MiddleTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MiddleTextFocusLost
        // TODO add your handling code here:
        MiddleNameFlag = 0;
        error = "";
        MiddleLabel.setForeground(Color.black);
        ErrorLabel.setText("");
        String MiddleName = MiddleText.getText();
        if (MiddleName.trim().length() >= 2) {
            error = "MiddleName should not exceed more than 1 characters";
        } else {
            MiddleNameFlag = 1;
        }
        if (!"".equals(error)) {
            MiddleLabel.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_MiddleTextFocusLost

    private void AddressLine1TextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AddressLine1TextFocusLost
        // TODO add your handling code here:
        error = "";
        ErrorLabel.setText("");
        AddressLine1Label.setForeground(Color.black);
        AddressLine1FLag = 0;
        String AddressLine1 = AddressLine1Text.getText();
        if ("".equals(AddressLine1.trim())) {
            error = "Street Name should not be kept blank";
        } else if (AddressLine1.length() > 35) {
            error = "Street Name should not exceed more than 35 characters";
        } else {
            AddressLine1FLag = 1;
        }
        if (!"".equals(error)) {
            AddressLine1Label.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_AddressLine1TextFocusLost

    private void CityTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CityTextFocusLost
        // TODO add your handling code here:
        error = "";
        ErrorLabel.setText("");
        CityLabel.setForeground(Color.black);
        CityFlag = 0;
        String City = CityText.getText();
        if ("".equals(City.trim())) {
            error = "City Name should not be kept blank";
        } else if (City.length() > 25) {
            error = "City Name should not exceed more than 35 characters";
        } else {
            CityFlag = 1;
        }
        if (!"".equals(error)) {
            CityLabel.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_CityTextFocusLost

    private void AddressLine2TextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AddressLine2TextFocusLost
        // TODO add your handling code here:
        AddressLine2Flag = 0;
        error = "";
        AddressLine2Label.setForeground(Color.black);
        ErrorLabel.setText("");
        String AddressLine2 = AddressLine2Text.getText();
        if (AddressLine2.trim().length() > 35) {
            error = "Address Line 2 should not exceed more than 25 characters";
        } else {
            AddressLine2Flag = 1;
        }
        if (!"".equals(error)) {
            AddressLine2Label.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_AddressLine2TextFocusLost

    private void StateTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_StateTextFocusLost
        // TODO add your handling code here:
        error = "";
        ErrorLabel.setText("");
        StateFlag = 0;
        StateLabel.setForeground(Color.black);
        String State = StateText.getText();
        if ("".equals(State.trim())) {
            error = "State Name should not be kept blank";
        } else if (State.trim().length() >= 3) {
            error = "Stare Name should not exceed more than 2 characters";
        } else {
            StateFlag = 1;
        }
        if (!"".equals(error)) {
            StateLabel.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_StateTextFocusLost

    private void PostalTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PostalTextFocusLost
        // TODO add your handling code here:
        error = "";
        ErrorLabel.setText("");
        PincodeFlag = 0;
        PostalCodeLabel.setForeground(Color.black);
        String Postal = PostalText.getText().trim();
        if ("".equals(Postal)) {
            error = "Postal code should not be kept blank";
        } else if (Postal.length() >= 10) {
            error = "Postal code should not exceed more than 9 characters";
        } else {
            PincodeFlag = 1;
        }
        for (int i = 0; i < Postal.length(); i++) {

            //If we find a non-digit character we return false.
            if (!Character.isDigit(Postal.charAt(i))) {
                error = "Postal code should be a number";
                PincodeFlag = 0;
                PostalCodeLabel.setForeground(Color.red);
            } else {
                PincodeFlag = 1;
            }

        }
        if (!"".equals(error) || PincodeFlag == 0) {
            PostalCodeLabel.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_PostalTextFocusLost

    private void PhoneTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PhoneTextFocusLost
        // TODO add your handling code here:
        error = "";
        ErrorLabel.setText("");
        PhoneNumberFLag = 0;
        PhoneLabel.setForeground(Color.black);
        String Phone = PhoneText.getText().trim();
        if ("".equals(Phone)) {
            error = "Phone Number should not be kept blank";
        } else if (Phone.length() >= 13) {
            error = "Phone Number should not exceed more than 10 characters";
        } else {
            PhoneNumberFLag = 1;
        }
        if (!"".equals(error)) {
            PhoneLabel.setForeground(Color.red);
            ErrorLabel.setText(error);
        }
        buttonEnabled();
    }//GEN-LAST:event_PhoneTextFocusLost

    private void AddressLine2TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddressLine2TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddressLine2TextActionPerformed

    private void LeftInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeftInfoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_LeftInfoMouseClicked

    private void FirstNameTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FirstNameTextKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FirstNameTextKeyTyped
    public void buttonEnabled() {
        // Code to Enable button of disable buttom
        /*
         * If all the constraints are satisfy we need to enable the button.
         * This method checks the constraints and enables the button.
         */
        if (ErrorLabel.getText() == "" && FirstNameFlag == 1 && LastNameFlag == 1 && AddressLine1FLag == 1 && CityFlag == 1
                && StateFlag == 1 && PincodeFlag == 1 && PhoneNumberFLag == 1 && MiddleNameFlag == 1) {
            Modify.setEnabled(true);
        } else {
            if (ErrorLabel.getText() == "") {
                ErrorLabel.setText("*All are required Fields");
            }
            Modify.setEnabled(false);
        }
        int progress = 0;
        if (FirstNameFlag == 1) {
            progress = progress + 10;
        }
        if (LastNameFlag == 1) {
            progress = progress + 10;
        }
        if (MiddleNameFlag == 1) {
            progress = progress + 10;
        }
        if (AddressLine1FLag == 1) {
            progress = progress + 10;
        }
        if (AddressLine2Flag == 1) {
            progress = progress + 10;
        }
        if (CityFlag == 1) {
            progress = progress + 10;
        }
        if (StateFlag == 1) {
            progress = progress + 10;
        }
        if (PincodeFlag == 1) {
            progress = progress + 10;
        }
        if (PhoneNumberFLag == 1) {
            progress = progress + 10;
        }
        if (ProgressBar.getValue() > 50) {//change color on 50%
            UIDefaults defaults = new UIDefaults();
            defaults.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.green));
            defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new MyPainter(Color.green));
            ProgressBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
            ProgressBar.putClientProperty("Nimbus.Overrides", defaults);
        } else {
            UIDefaults defaults = new UIDefaults();
            defaults.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.red));
            defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new MyPainter(Color.red));
            ProgressBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
            ProgressBar.putClientProperty("Nimbus.Overrides", defaults);
        }
        ProgressBar.setValue(progress);


    }

    /*
     * This method is used for taking the values in the .txt file and putting it into an array called TableValues.
     */
    public String[][] textValuesToArray() {
        int rows = LeftInfo.getRowCount();
        String[][] TableValues = new String[rows][10];
        try {
            // Code to access the file(.txt)
            BufferedReader r = new BufferedReader(new FileReader("ContactList.txt"));
            String line = r.readLine();
            if (line != null) {
                int i = 0;
                do {
                    String rowData[] = line.split("\t");
                    line = r.readLine();
                    for (int j = 0; j < 10; j++) {
                        TableValues[i][j] = rowData[j];
                    }
                    i++;
                } while (line != null);
            }
        } catch (IOException e) {
            System.out.println(e);
        }
        return TableValues;

    }

    /*
     * This method is called for updating the .txt file.
     * noOfDeleteItems is an variable which specifies the number of delete items from the table in 1 session.
     * We take the values from TableValues and add it to the .txt file
     * We over write all the previous values with new values.
     */
    public void updateTxtFile(String TableValues[][], int noOfDeleteItems) {
        //int dialogResult = JOptionPane.NO_OPTION;
        if (noOfDeleteItems == 0) {
            //FinalResult.setText("Your result has been sucessfully Updates");
            //Finalresult[0] = "Your result has been sucessfully Updates";
            //int dialogButton = JOptionPane.YES_NO_OPTION;
            //dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to update the record ?", "Update DialogBox - Warning ", dialogButton, 2);
            //    if (dialogResult == JOptionPane.YES_OPTION){
            FinalResult.setText("Your result has been sucessfully Updated");

            FinalResult.setToolTipText("Confirmation Message");
            FinalResult.setToolTipText("Confirmation Message");

            FinalResult.setForeground(new Color(0, 153, 51));
//            }
        } else {
            //FinalResult.setText("Your result has been sucessfully Deleted");
            //Finalresult[0] = "Your result has been sucessfully Deleted";
            // int dialogButton = JOptionPane.YES_NO_OPTION;
            //dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the record ?", "Delete DialogBox - Warning", dialogButton, 2);
            //if (dialogResult == JOptionPane.YES_OPTION){
            FinalResult.setText("Your result has been sucessfully Deleted");
            FinalResult.setToolTipText("Confirmation Message");
            FinalResult.setForeground(new Color(0, 153, 51));
            //}
        }
        //if (dialogResult == JOptionPane.YES_OPTION) {
        try {
            PrintWriter writer = new PrintWriter("ContactList.txt", "UTF-8");
            for (int i = 0; i < TableValues.length - noOfDeleteItems; i++) {
                String value = "";
                for (int j = 0; j < 10; j++) {
                    value = value + TableValues[i][j] + "\t";
                }
                writer.println(value);
            }
            writer.close();
        } catch (Exception e) {
            System.out.println(e);
        }
        LeftInfo.validate();
        LeftInfo.repaint();
        tableConfig();
        Insert();
        //} else {
        //  LeftInfo.validate();
        //LeftInfo.repaint();
        //tableConfig();
        //Insert();
        //}
    }

    /*
     * This is method for all the funtionality for the table.
     * These is where the table model is defined and the table is populated.
     */
    public int tableConfig() {

        LeftInfo = new javax.swing.JTable();// Table name is LeftInfo
        //ImageIcon deleteIcon = new ImageIcon("add_user.png");
        String deleteIcon = "Delete"; // Delete button label
        // To add a header of the table
        LeftInfo.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Name", "Phone No.", ""
        }) {
            /*The first two columns of the table should be editable as some people may 
             * edit values from the table itself. To prevent this we disable the table.
             * Only the third column is enabled so that user can access the delete button
             */
            public boolean isCellEditable(int row, int column) {
                if (column < 2) {
                    return false;//This causes all cells to be not editable
                } else {
                    return true;
                }

            }
        });
        DefaultTableModel model = (DefaultTableModel) LeftInfo.getModel();
        try {
            // To access the file and populate the table.
            BufferedReader r = new BufferedReader(new FileReader("ContactList.txt"));
            String line = r.readLine();
            if (line != null) {
                do {
                    Object rowData[] = line.split("\t");// Split the text file rows using tab spacing.
                    String Name = rowData[0] + " " + rowData[1] + " " + rowData[2];// Name field displays the full name.
                    Object[] row = {Name, rowData[8], deleteIcon};
                    model.addRow(row);
                    line = r.readLine();
                } while (line != null);
            }
        } catch (IOException e) {
            System.out.println(e);
        }
        if (LeftInfo.getRowCount() != 0) {
            LeftInfo.setRowSelectionInterval(0, 0);
        }
        TableValues = textValuesToArray();// Method is called which returns the array of all the elements in the file.
        Action delete = new AbstractAction() {// Method to delete a contact.
            public void actionPerformed(ActionEvent e) {
                javax.swing.JTable table = (javax.swing.JTable) e.getSource();
                int modelRow = Integer.valueOf(e.getActionCommand());
                // Loop to move array values up by 1 to fill up the void space of delete.
                for (int j = modelRow; j < TableValues.length - 1; j++) {
                    for (int k = 0; k < 10; k++) {
                        TableValues[j][k] = TableValues[j + 1][k];
                    }
                }
                //Deleting the last element of array
                for (int k = 0; k < 10; k++) {
                    TableValues[TableValues.length - 1][k] = null;
                }
                noOfDeleteItems++;// Number of rows deleted in one session.
                updateTxtFile(TableValues, 1);// Call this function to update the file (.txt)
                // To remove the entry from the table.
                ((DefaultTableModel) table.getModel()).removeRow(modelRow);

            }
        };
        // Creation of the delete button.
        ButtonColumn buttonColumn = new ButtonColumn(LeftInfo, delete, 2);
        buttonColumn.setMnemonic(KeyEvent.VK_D);
        LeftInfo.setRowHeight(20);

        jScrollPane1.setViewportView(LeftInfo);
        LeftInfo.setFillsViewportHeight(true);

        LeftInfo.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // When user selects a entry in the table. The fields in the form should be filled so that user can edit the values.
                if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 1 && LeftInfo.getSelectedColumn() > -1 && LeftInfo.getSelectedRow() > -1) {
                    int progress = 100;
                    if (ProgressBar.getValue() > 50 || progress > 50) {//change color on 50%
                        UIDefaults defaults = new UIDefaults();
                        defaults.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.green));
                        defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new MyPainter(Color.green));
                        ProgressBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
                        ProgressBar.putClientProperty("Nimbus.Overrides", defaults);
                    } else {
                        UIDefaults defaults = new UIDefaults();
                        defaults.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.red));
                        defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new MyPainter(Color.red));
                        ProgressBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
                        ProgressBar.putClientProperty("Nimbus.Overrides", defaults);
                    }
                    ProgressBar.setValue(progress);
                    TableValues = textValuesToArray();
                    RightPanel.setVisible(true);
                    int selectedRowIndex = LeftInfo.getSelectedRow();
                    int SelectedColumnIndex = LeftInfo.getSelectedColumn();
                    FirstNameText.setText(TableValues[selectedRowIndex][0].toString());
                    LastNameText.setText(TableValues[selectedRowIndex][2].toString());
                    MiddleText.setText(TableValues[selectedRowIndex][1].toString());
                    AddressLine1Text.setText(TableValues[selectedRowIndex][3].toString());
                    AddressLine2Text.setText(TableValues[selectedRowIndex][4].toString());
                    CityText.setText(TableValues[selectedRowIndex][5].toString());
                    StateText.setText(TableValues[selectedRowIndex][6].toString());
                    PostalText.setText(TableValues[selectedRowIndex][7].toString());
                    PhoneText.setText(TableValues[selectedRowIndex][8].toString());
                    StatusLabel.setText("You are currently modifying a contact");
                    if (TableValues[selectedRowIndex][9].toString().equalsIgnoreCase("Male")) {
                        MaleRadio.setSelected(true);
                    } else {
                        FemaleRadio.setSelected(true);
                    }
                    currentRowSelected = selectedRowIndex;
                    error = "";
                    ErrorLabel.setText(error);
                    FirstNameFlag = 1;
                    LastNameFlag = 1;
                    AddressLine1FLag = 1;
                    CityFlag = 1;
                    StateFlag = 1;
                    PincodeFlag = 1;
                    PhoneNumberFLag = 1;
                    AddressLine2Flag = 1;
                    MiddleNameFlag = 1;
                    FirstNameLabel.setForeground(Color.black);
                    LastNameLabel.setForeground(Color.black);
                    MiddleLabel.setForeground(Color.black);
                    AddressLine1Label.setForeground(Color.black);
                    AddressLine2Label.setForeground(Color.black);
                    CityLabel.setForeground(Color.black);
                    StateLabel.setForeground(Color.black);
                    PostalCodeLabel.setForeground(Color.black);
                    PhoneLabel.setForeground(Color.black);
                    Modify.setEnabled(true);
                }
            }
        });
        return 1;

    }

    public void Insert() {
        FirstNameFlag = 0;
        LastNameFlag = 0;
        AddressLine1FLag = 0;
        CityFlag = 0;
        StateFlag = 0;
        PincodeFlag = 0;
        PhoneNumberFLag = 0;
        MiddleNameFlag = 0;
        AddressLine2Flag = 0;
        FirstNameLabel.setForeground(Color.black);
        LastNameLabel.setForeground(Color.black);
        MiddleLabel.setForeground(Color.black);
        AddressLine1Label.setForeground(Color.black);
        AddressLine2Label.setForeground(Color.black);
        CityLabel.setForeground(Color.black);
        StateLabel.setForeground(Color.black);
        PostalCodeLabel.setForeground(Color.black);
        PhoneLabel.setForeground(Color.black);
        FirstNameText.setText("");
        LastNameText.setText("");
        MiddleText.setText("");
        AddressLine1Text.setText("");
        AddressLine2Text.setText("");
        CityText.setText("");
        StateText.setText("");
        PostalText.setText("");
        PhoneText.setText("");
        RightPanel.setVisible(true);
        Modify.setEnabled(false);
        ErrorLabel.setText("*All are required Fields");
        currentRowSelected = -1;
        StatusLabel.setText("Your are currently adding a contact");// Setting up the status bar
        MaleRadio.setSelected(true);
        FemaleRadio.setSelected(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //System.out.println(args[0]);
                new Index().setVisible(true);
                Index i = new Index();
                i.buttonEnabled();
            }
        });
    }
    /*
     * This method is used to create the delete button in the column of a table
     */

    public class ButtonColumn extends AbstractCellEditor
            implements TableCellRenderer, TableCellEditor, ActionListener, MouseListener {

        private JTable table;
        private Action action;
        private int mnemonic;
        private Border originalBorder;
        private Border focusBorder;
        private JButton renderButton;
        private JButton editButton;
        private Object editorValue;
        private boolean isButtonColumnEditor;

        /**
         * Create the ButtonColumn to be used as a renderer and editor. The
         * renderer and editor will automatically be installed on the
         * TableColumn of the specified column.
         *
         * @param table the table containing the button renderer/editor
         * @param action the Action to be invoked when the button is invoked
         * @param column the column to which the button renderer/editor is added
         */
        public ButtonColumn(JTable table, Action action, int column) {
            this.table = table;
            this.action = action;

            renderButton = new JButton();
            editButton = new JButton();
            editButton.setFocusPainted(false);
            editButton.addActionListener(this);
            originalBorder = editButton.getBorder();
            setFocusBorder(new LineBorder(Color.BLUE));

            TableColumnModel columnModel = table.getColumnModel();
            columnModel.getColumn(column).setCellRenderer(this);
            columnModel.getColumn(column).setCellEditor(this);
            table.addMouseListener(this);
        }

        /**
         * Get foreground color of the button when the cell has focus
         *
         * @return the foreground color
         */
        public Border getFocusBorder() {
            return focusBorder;
        }

        /**
         * The foreground color of the button when the cell has focus
         *
         * @param focusBorder the foreground color
         */
        public void setFocusBorder(Border focusBorder) {
            this.focusBorder = focusBorder;
            editButton.setBorder(focusBorder);
        }

        public int getMnemonic() {
            return mnemonic;
        }

        /**
         * The mnemonic to activate the button when the cell has focus
         *
         * @param mnemonic the mnemonic
         */
        public void setMnemonic(int mnemonic) {
            this.mnemonic = mnemonic;
            renderButton.setMnemonic(mnemonic);
            editButton.setMnemonic(mnemonic);
        }

        @Override
        public Component getTableCellEditorComponent(
                JTable table, Object value, boolean isSelected, int row, int column) {
            if (value == null) {
                editButton.setText("");
                editButton.setIcon(null);
            } else if (value instanceof Icon) {
                editButton.setText("");
                editButton.setIcon((Icon) value);
            } else {
                editButton.setText(value.toString());
                editButton.setIcon(null);
            }

            this.editorValue = value;
            return editButton;
        }

        @Override
        public Object getCellEditorValue() {
            return editorValue;
        }

//
//  Implement TableCellRenderer interface
//
        public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                renderButton.setForeground(table.getSelectionForeground());
                renderButton.setBackground(table.getSelectionBackground());
            } else {
                renderButton.setForeground(table.getForeground());
                renderButton.setBackground(UIManager.getColor("Button.background"));
            }

            if (hasFocus) {
                renderButton.setBorder(focusBorder);
            } else {
                renderButton.setBorder(originalBorder);
            }

//		renderButton.setText( (value == null) ? "" : value.toString() );
            if (value == null) {
                renderButton.setText("");
                renderButton.setIcon(null);
            } else if (value instanceof ImageIcon) {
                renderButton.setText("");
                renderButton.setIcon((ImageIcon) value);
            } else {
                renderButton.setText(value.toString());
                renderButton.setIcon(null);
            }

            return renderButton;
        }

//
//  Implement ActionListener interface
//
	/*
         *	The button has been pressed. Stop editing and invoke the custom Action
         */
        public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            fireEditingStopped();

            //  Invoke the Action

            ActionEvent event = new ActionEvent(
                    table,
                    ActionEvent.ACTION_PERFORMED,
                    "" + row);
            action.actionPerformed(event);
        }

//
//  Implement MouseListener interface
//
	/*
         *  When the mouse is pressed the editor is invoked. If you then then drag
         *  the mouse to another cell before releasing it, the editor is still
         *  active. Make sure editing is stopped when the mouse is released.
         */
        public void mousePressed(MouseEvent e) {
            if (table.isEditing()
                    && table.getCellEditor() == this) {
                isButtonColumnEditor = true;
            }
        }

        public void mouseReleased(MouseEvent e) {
            if (isButtonColumnEditor
                    && table.isEditing()) {
                table.getCellEditor().stopCellEditing();
            }

            isButtonColumnEditor = false;
        }

        public void mouseClicked(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
    }

    class MyPainter implements Painter<JProgressBar> {

        private final Color color;

        public MyPainter(Color c1) {
            this.color = c1;
        }

        @Override
        public void paint(Graphics2D gd, JProgressBar t, int width, int height) {
            gd.setColor(color);
            gd.fillRect(0, 0, width, height);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Address;
    private javax.swing.JLabel AddressLine1Label;
    private javax.swing.JTextField AddressLine1Text;
    private javax.swing.JLabel AddressLine2Label;
    private javax.swing.JTextField AddressLine2Text;
    private javax.swing.JLabel CityLabel;
    private javax.swing.JTextField CityText;
    private javax.swing.JLabel ErrorLabel;
    private javax.swing.JRadioButton FemaleRadio;
    private javax.swing.JLabel FinalResult;
    private javax.swing.JLabel FirstNameLabel;
    private javax.swing.JTextField FirstNameText;
    private javax.swing.JButton Insert;
    private javax.swing.JLabel LastNameLabel;
    private javax.swing.JTextField LastNameText;
    private javax.swing.JTable LeftInfo;
    private javax.swing.JPanel LeftPanel;
    private javax.swing.JRadioButton MaleRadio;
    private javax.swing.JLabel MiddleLabel;
    private javax.swing.JTextField MiddleText;
    private javax.swing.JButton Modify;
    private javax.swing.JPanel Name;
    private javax.swing.JLabel PhoneLabel;
    private javax.swing.JFormattedTextField PhoneText;
    private javax.swing.JLabel PostalCodeLabel;
    private javax.swing.JTextField PostalText;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JPanel RightPanel;
    private javax.swing.JLabel StateLabel;
    private javax.swing.JTextField StateText;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
